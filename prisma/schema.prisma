// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // Changer de "postgresql" à "sqlite"
  url      = "file:./dev.db" // Chemin vers le fichier de base de données SQLite
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          String    @default("user")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  addresses     Address[]
  reviews       Review[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id              String            @id @default(cuid())
  name            String
  description     String
  fullDescription String?
  price           Float
  oldPrice        Float?
  discount        Int               @default(0)
  image           String
  category        String
  inStock         Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  reviews         Review[]
  specifications  Specification[]
  orderItems      OrderItem[]
}

model Specification {
  id        String  @id @default(cuid())
  name      String
  value     String
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id              String      @id @default(cuid())
  userId          String
  total           Float
  status          String      @default("pending")
  paymentStatus   String      @default("pending")
  trackingNumber  String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  user            User        @relation(fields: [userId], references: [id])
  items           OrderItem[]
  shippingAddress Address     @relation(fields: [addressId], references: [id])
  addressId       String
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  name      String
  price     Float
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
}

model Address {
  id         String  @id @default(cuid())
  userId     String
  name       String
  street     String
  city       String
  postalCode String
  country    String
  isDefault  Boolean @default(false)
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Order      Order[]
}

model Review {
  id        String   @id @default(cuid())
  productId String
  userId    String
  rating    Int
  comment   String
  status    String   @default("pending")
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Promotion {
  id          String   @id @default(cuid())
  code        String   @unique
  type        String
  value       Float
  minPurchase Float    @default(0)
  startDate   DateTime
  endDate     DateTime
  usageLimit  Int      @default(0)
  usageCount  Int      @default(0)
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
